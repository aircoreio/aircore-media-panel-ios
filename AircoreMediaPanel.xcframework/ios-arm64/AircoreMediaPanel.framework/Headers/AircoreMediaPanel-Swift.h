// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef AIRCOREMEDIAPANEL_SWIFT_H
#define AIRCOREMEDIAPANEL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AircoreMediaPanel",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class NSString;
enum AIRClientLogLevel : NSInteger;
@class NSURL;
enum AIRClientEvent : NSInteger;

/// The Client is the primary controller which powers the MediaPanel.
SWIFT_CLASS_NAMED("Client")
@interface AIRClient : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable authToken;
/// The desired log level for the MediaPanel logs . Defaults to .info
@property (nonatomic) enum AIRClientLogLevel logLevel;
/// A unique id that represents the user in your system. This will be used to identify the user internally in our system.
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
/// The name to be used for the user on the MediaPanel
@property (nonatomic, copy) NSString * _Nullable userDisplayName;
/// The profile picture  to be used for the user on the MediaPanel
@property (nonatomic, copy) NSURL * _Nullable userAvatarURL;
/// Create a new instance of the Client class using a publishable key
/// \param publishableKey a publishable key
///
/// \param userID the desired User ID
///
///
/// returns:
/// A new instance of the Client class
+ (AIRClient * _Nonnull)createWithPublishableKey:(NSString * _Nonnull)publishableKey userID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Create a new instance of the Client class using an auth token
/// \param authToken an auth token
///
/// \param userID the desired User ID
///
///
/// returns:
/// A new instance of the Client class
+ (AIRClient * _Nonnull)createWithAuthToken:(NSString * _Nonnull)authToken userID:(NSString * _Nonnull)userID SWIFT_WARN_UNUSED_RESULT;
/// Update the current auth token for a Channel. Typically called when the token is nearing expiry and to continue the session uninterrupted.
/// \param token the new auth token
///
/// \param channelID the Channel ID
///
- (void)updateAuthToken:(NSString * _Nonnull)token forChannelID:(NSString * _Nonnull)channelID;
/// Register a new handler for a given event
/// \param event the event
///
/// \param handler a closure that is called when the event is received. Includes the Channel ID.
///
- (void)on:(enum AIRClientEvent)event handler:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))handler;
/// Unregister from a previously registered event
/// \param event the event
///
- (void)off:(enum AIRClientEvent)event;
/// Register a new handler for errors
/// \param handler a closure that is called when the error is triggered.
///
- (void)onErrorWithHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nonnull))handler;
/// Connect to a Channel. This should be called before a MediaPanel is created and presented with a ViewController.
/// \param channelID the Channel ID
///
- (void)connectToChannelID:(NSString * _Nonnull)channelID;
/// Disconnect from a Channel
/// \param channelID the Channel ID
///
- (void)disconnectFromChannelID:(NSString * _Nonnull)channelID;
/// Disconnect from all channels and tear down the Client. Once destroy is invoked, the client cannot be used anymore.
- (void)destroy;
/// Returns the current Framework Version
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull frameworkVersion;)
+ (NSString * _Nonnull)frameworkVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An Enum representing all the internal events that apps can listent to.
typedef SWIFT_ENUM_NAMED(NSInteger, AIRClientEvent, "ClientEvent", open) {
/// The Publishable API Key used to create the Client is invalid.
  AIRClientEventPublishableAPIKeyInvalid = 0,
/// The Session Auth token used to create the Client is invalid.
  AIRClientEventSessionAuthTokenInvalid = 1,
/// The session auth token was updated with an incompatible token.
  AIRClientEventSessionAuthTokenMismatch = 2,
/// The Session Auth token used to create the Client is nearing its expiration. Please fetch a new token from your backend and update the Client.
  AIRClientEventSessionAuthTokenNearingExpiry = 3,
/// Your current user joined a call
  AIRClientEventLocalUserJoined = 4,
/// Your current user left a call
  AIRClientEventLocalUserLeft = 5,
/// Your current user started publishing in a channel
  AIRClientEventLocalStreamStarted = 6,
/// Your current user stopped publishing in a channel
  AIRClientEventLocalStreamStopped = 7,
/// Your current user muted their stream in a channel
  AIRClientEventLocalStreamMuted = 8,
/// Your current user unmuted their stream in a channel
  AIRClientEventLocalStreamUnmuted = 9,
/// A remote user’s stream was added to the channel
  AIRClientEventRemoteStreamAdded = 10,
/// A remote user’s stream was removed from the channel
  AIRClientEventRemoteStreamRemoved = 11,
/// A remote user presence joined the channel
  AIRClientEventRemoteUserJoined = 12,
/// A remote user presence left the channel
  AIRClientEventRemoteUserLeft = 13,
};

/// Log Levels
typedef SWIFT_ENUM_NAMED(NSInteger, AIRClientLogLevel, "ClientLogLevel", open) {
  AIRClientLogLevelDebug = 0,
  AIRClientLogLevelInfo = 1,
  AIRClientLogLevelWarning = 2,
  AIRClientLogLevelError = 3,
};



@class AIRMediaPanelConfiguration;
@class AIRTheme;
@class UIViewController;
enum AIRMediaPanelStyle : NSInteger;

/// The MediaPanel is the Widget that renders the panel in your existing ViewControllers
SWIFT_CLASS_NAMED("MediaPanel")
@interface AIRMediaPanel : NSObject
/// Create a new instance of a MediaPanel
/// \param client Existing client instance
///
/// \param channelID The same channelID used while creating the Cleint
///
/// \param configuration The MediaPanel configuration
///
/// \param theme The MediaPanel theme
///
- (nonnull instancetype)initWithClient:(AIRClient * _Nonnull)client channelID:(NSString * _Nonnull)channelID configuration:(AIRMediaPanelConfiguration * _Nonnull)configuration theme:(AIRTheme * _Nullable)theme OBJC_DESIGNATED_INITIALIZER;
/// Set the theme of a MediaPanel
/// \param theme the theme to apply
///
- (void)setTheme:(AIRTheme * _Nonnull)theme;
/// Set the configuration of a MediaPanel
/// \param configuration the configuration to apply
///
- (void)setConfiguration:(AIRMediaPanelConfiguration * _Nonnull)configuration;
/// Present the MediaPanel in the given ViewController
/// \param viewController the parent ViewController to present on
///
/// \param style the style to use
///
- (void)presentIn:(UIViewController * _Nonnull)viewController style:(enum AIRMediaPanelStyle)style;
/// Destroys the MediaPanel and removes it from the view hierarchy
- (void)destroy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AIRMediaPanelStrings;
@class AIRMediaPanelCollapsedStateOptions;
@class AIRMediaPanelExpandedStateOptions;

/// This class allows the MediaPanel to be customized in several ways.
/// The MediaPanel can have different states. A Collapsed state, Expanded state
/// or a Widget state. Widget and Collapsed states are mutually exclusive: you
/// pick either one, and when tapping the widget (or the collapsed panel)
/// it switches to the Expanded state.
/// You can present the panel in either widget or collapsed mode. After
/// creating a MediaPanel object, choose the style when presenting it:
/// \code
/// panel.present(in: self, style: .widget)
///
/// \endcodeor
/// \code
/// panel.present(in: self, style: .bottomBar)
///
/// \endcodeThe media panel configurations and strings are applied to all these states.
/// In addition some subset of the configuration and strings can be overridden
/// for a particular state. For example, you can set the panelTitle to be
/// different just when the panel is in expanded state by overriding the
/// ExpandedStateOptions.
SWIFT_CLASS_NAMED("MediaPanelConfiguration")
@interface AIRMediaPanelConfiguration : NSObject
/// Title of the panel. Shown in both collapsed and expanded states. If not
/// set, it will be replaced with a participant count in the collapsed state.
@property (nonatomic, copy) NSString * _Nullable panelTitle;
/// Subtitle that is shown in a smaller font below the title, only in expanded state.
@property (nonatomic, copy) NSString * _Nullable panelSubtitle;
/// Defaults to <code>true</code>. Set this to <code>false</code> if you are initializing the panel
/// for a user who can only be in listen mode and cannot turn on the microphone.
@property (nonatomic) BOOL showMicrophoneButton;
/// If false, let users explicitly turn on the mic after joining.
/// If true, automatically turn on the mic to publish after joining.
/// Default is true
@property (nonatomic) BOOL autoPublishMicOnJoin;
/// MediaPanel strings that can be changed/localized.
@property (nonatomic, strong) AIRMediaPanelStrings * _Nonnull strings;
/// The configuration used to customize the MediaPanel in the collapsed state.
/// Setting values here will override the values set in the parent
/// <code>MediaPanelConfiguration</code> and in the <code>Strings</code> objects.
@property (nonatomic, strong) AIRMediaPanelCollapsedStateOptions * _Nonnull collapsedStateOptions;
/// The configuration used to customize the MediaPanel in the collapsed state.
/// Setting values here will override the values set in the parent
/// <code>MediaPanelConfiguration</code> and in the <code>Strings</code> objects.
@property (nonatomic, strong) AIRMediaPanelExpandedStateOptions * _Nonnull expandedStateOptions;
/// Creates a new instance of <code>MediaPanelConfiguration</code>. All the values are
/// optional and will fallback to the defaults if not specified.
- (nonnull instancetype)initWithPanelTitle:(NSString * _Nullable)panelTitle panelSubtitle:(NSString * _Nullable)panelSubtitle showMicrophoneButton:(BOOL)showMicrophoneButton autoPublishMicOnJoin:(BOOL)autoPublishMicOnJoin strings:(AIRMediaPanelStrings * _Nonnull)strings collapsedStateOptions:(AIRMediaPanelCollapsedStateOptions * _Nonnull)collapsedStateOptions expandedStateOptions:(AIRMediaPanelExpandedStateOptions * _Nonnull)expandedStateOptions OBJC_DESIGNATED_INITIALIZER;
/// Creates a <code>MediaPanelConfiguration</code> instance with the default settings.
///
/// returns:
/// the <code>MediaPanelConfiguration</code> instance
+ (AIRMediaPanelConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// MediaPanel strings that can be changed/localized.
SWIFT_CLASS_NAMED("Strings")
@interface AIRMediaPanelStrings : NSObject
/// Title to show in the join button. Defaults to <code>Join</code>.
@property (nonatomic, copy) NSString * _Nonnull joinButton;
/// Title to show on the join button when joining. Defaults to <code>Joining...</code>.
@property (nonatomic, copy) NSString * _Nonnull joiningButton;
/// Shown below the panel title in the collapsed state only.
/// Defaults to <code>Tap Join to start the audio session</code>.
@property (nonatomic, copy) NSString * _Nonnull joinButtonTooltip;
/// Title to show on the leave button. Defaults to <code>Leave</code>.
@property (nonatomic, copy) NSString * _Nonnull leaveButton;
/// Title to show on the retry button when there’s an error. Defaults to <code>Retry</code>.
@property (nonatomic, copy) NSString * _Nonnull retryButton;
/// Text shown in the middle of the panel before you join, when no one is on the call,
/// in expanded state only. Defaults to <code>No one is on the call yet.</code>.
@property (nonatomic, copy) NSString * _Nonnull emptyCallTitle;
/// Second line of text shown in the middle of the panel before you join,
/// when no one is on the call, in expanded state only.
/// Defaults to <code>Tap Join below to be the first!</code>.
@property (nonatomic, copy) NSString * _Nonnull emptyCallSubtitle;
/// Text shown if the call is full and you are unable to join at that time.
/// Defaults to <code>The channel is full</code>.
@property (nonatomic, copy) NSString * _Nonnull channelIsFullLabel;
/// Text shown when an unhandled error happens. Defaults to <code>Something went wrong...</code>.
@property (nonatomic, copy) NSString * _Nonnull genericErrorLabel;
/// Text shown in the modal presented when you can’t join because the number of speakers was reached.
/// Defaults to <code>Speaker Limit Reached</code>.
@property (nonatomic, copy) NSString * _Nonnull speakerLimitModalTitle;
/// Second line shown in the modal presented when you can’t join because the number of speakers was reached.
/// Defaults to <code>The number of speakers supported is currently at capacity. Try again when a speaker leaves</code>.
@property (nonatomic, copy) NSString * _Nonnull speakerLimitModalSubtitle;
/// Title to show in the button to dismiss the modal presented when you can’t join because the number of speakers was reached.
/// Defaults to <code>OK</code>.
@property (nonatomic, copy) NSString * _Nonnull speakerLimitModalDismissButton;
/// Text shown in the modal presented when you don’t have microphone usage permissions.
/// Defaults to <code>Enable Microphone</code>.
@property (nonatomic, copy) NSString * _Nonnull noMicrophonePermissionsModalTitle;
/// Second line shown in the modal presented when you don’t have microphone usage permissions.
/// Defaults to <code>Allow access to your microphone in settings before you can use this feature.</code>.
@property (nonatomic, copy) NSString * _Nonnull noMicrophonePermissionsModalSubtitle;
/// Title to show in the button to dismiss the modal presented when you don’t have microphone usage permissions. Defaults to <code>OK</code>.
@property (nonatomic, copy) NSString * _Nonnull noMicrophonePermissionsModalDismissButton;
/// Title to show in the button to open the app’s settings shown in the modal presented when you don’t have microphone usage permissions. Defaults to <code>Go to Settings</code>.
@property (nonatomic, copy) NSString * _Nonnull noMicrophonePermissionsModalGoToSettingsButton;
/// Creates a new instance of <code>Strings</code>. All the values are
/// optional and will fallback to the defaults if not specified.
- (nonnull instancetype)initWithJoinButton:(NSString * _Nonnull)joinButton joiningButton:(NSString * _Nonnull)joiningButton joinButtonTooltip:(NSString * _Nonnull)joinButtonTooltip leaveButton:(NSString * _Nonnull)leaveButton retryButton:(NSString * _Nonnull)retryButton emptyCallTitle:(NSString * _Nonnull)emptyCallTitle emptyCallSubtitle:(NSString * _Nonnull)emptyCallSubtitle channelIsFullLabel:(NSString * _Nonnull)channelIsFullLabel genericErrorLabel:(NSString * _Nonnull)genericErrorLabel speakerLimitModalTitle:(NSString * _Nonnull)speakerLimitModalTitle speakerLimitModalSubtitle:(NSString * _Nonnull)speakerLimitModalSubtitle speakerLimitModalDismissButton:(NSString * _Nonnull)speakerLimitModalDismissButton noMicrophonePermissionsModalTitle:(NSString * _Nonnull)noMicrophonePermissionsModalTitle noMicrophonePermissionsModalSubtitle:(NSString * _Nonnull)noMicrophonePermissionsModalSubtitle noMicrophonePermissionsModalDismissButton:(NSString * _Nonnull)noMicrophonePermissionsModalDismissButton noMicrophonePermissionsModalGoToSettingsButton:(NSString * _Nonnull)noMicrophonePermissionsModalGoToSettingsButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The configuration used to customize the MediaPanel in the collapsed state.
/// Setting values here will override the values set in the parent
/// <code>MediaPanelConfiguration</code> and in the <code>Strings</code> objects.
SWIFT_CLASS_NAMED("CollapsedStateOptions")
@interface AIRMediaPanelCollapsedStateOptions : NSObject
/// Maximum number of avatars that are shown in the collapsed state.
/// After that, the rest is shown as “+99 others”. Defaults to <code>5</code>.
@property (nonatomic) NSInteger maxAvatars;
/// Overrides the panel title for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable panelTitle;
/// Overrides the panel subtitle for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable panelSubtitle;
/// Overrides the Join button title for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable joinButton;
/// Overrides the Join button title while joining for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable joiningButton;
/// Overrides the Leave button title for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable leaveButton;
/// Creates a new instance of <code>CollapsedStateOptions</code>. All the values are
/// optional and will fallback to the defaults if not specified.
- (nonnull instancetype)initWithMaxAvatars:(NSInteger)maxAvatars panelTitle:(NSString * _Nullable)panelTitle panelSubtitle:(NSString * _Nullable)panelSubtitle joinButton:(NSString * _Nullable)joinButton joiningButton:(NSString * _Nullable)joiningButton leaveButton:(NSString * _Nullable)leaveButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The configuration used to customize the MediaPanel in the expanded state.
/// Setting values here will override the values set in the parent
/// <code>MediaPanelConfiguration</code> and in the <code>Strings</code> objects.
SWIFT_CLASS_NAMED("ExpandedStateOptions")
@interface AIRMediaPanelExpandedStateOptions : NSObject
/// Overrides the panel title for the expanded state only.
@property (nonatomic, copy) NSString * _Nullable panelTitle;
/// Overrides the panel subtitle for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable panelSubtitle;
/// Overrides the Join button title for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable joinButton;
/// Overrides the Join button title while joining for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable joiningButton;
/// Overrides the Leave button title for the collapsed state only.
@property (nonatomic, copy) NSString * _Nullable leaveButton;
/// Creates a new instance of <code>ExpandedStateOptions</code>. All the values are
/// optional and will fallback to the defaults if not specified.
- (nonnull instancetype)initWithPanelTitle:(NSString * _Nullable)panelTitle panelSubtitle:(NSString * _Nullable)panelSubtitle joinButton:(NSString * _Nullable)joinButton joiningButton:(NSString * _Nullable)joiningButton leaveButton:(NSString * _Nullable)leaveButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// MediaPanel Styles
typedef SWIFT_ENUM_NAMED(NSInteger, AIRMediaPanelStyle, "MediaPanelStyle", open) {
  AIRMediaPanelStyleWidget = 0,
  AIRMediaPanelStyleBottomBar = 1,
};


@class UIColor;
@class UIFont;
@class AIRAvatar;
@class AIRIcons;

/// The Theme can be used to customize the visual aspects of the MediaPanel to conform to your native apps’ branding.
/// Two predefined themes are included in the sdk, light and dark.
/// If the user doesn’t set a theme, the light theme is used by default.
/// User can start with any theme and override specific properties you want to change doing:
/// \code
/// let theme = Theme() // equivalent to Theme.light(), can also use Theme.dark()
/// theme.primaryColor = .hex(0xff0000)
///
/// \endcodeOr
/// \code
/// let theme = Theme(
///     primaryColor: .hex(0xff0000)
/// )
///
/// \endcode
SWIFT_CLASS_NAMED("Theme")
@interface AIRTheme : NSObject
/// Creates a new instance of <code>Theme</code>. All the values are
/// optional and will fallback to the defaults if not specified.
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nullable)backgroundColor primaryColor:(UIColor * _Nullable)primaryColor dangerColor:(UIColor * _Nullable)dangerColor borderRadius:(CGFloat)borderRadius borderWidth:(CGFloat)borderWidth borderColor:(UIColor * _Nullable)borderColor fontFamily:(UIFont * _Nullable)fontFamily textColor:(UIColor * _Nullable)textColor subtextColor:(UIColor * _Nullable)subtextColor primaryContrastColor:(UIColor * _Nullable)primaryContrastColor dangerContrastColor:(UIColor * _Nullable)dangerContrastColor avatar:(AIRAvatar * _Nullable)avatar icons:(AIRIcons * _Nullable)icons OBJC_DESIGNATED_INITIALIZER;
/// Background color of the panels.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Color applied to the join button and avatar border when speaking. Also applied to the widget button.
@property (nonatomic, strong) UIColor * _Nonnull primaryColor;
/// Button color for leave and the badge on widget mode.
@property (nonatomic, strong) UIColor * _Nonnull dangerColor;
/// The border radius of the Media Panel and its buttons.
@property (nonatomic) CGFloat borderRadius;
/// The width of the border of the Media Panel and its buttons.
@property (nonatomic) CGFloat borderWidth;
/// Color of all the borders for the buttons.
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The main font used in the panel.
/// The size you set here is the base size, different texts will automatically
/// be rendered in different sizes based on the base size specified here.
/// If the goal is bigger font, specify a bigger size, all the texts will change proportionally.
@property (nonatomic, strong) UIFont * _Nonnull fontFamily;
/// Color of text for primary texts as title, names, error title and empty title messages.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Color of text on secondary texts as panel subtitle, error detail, empty group detail, number of users.
@property (nonatomic, strong) UIColor * _Nonnull subtextColor;
/// Color of text that appears on primary color items like buttons.
@property (nonatomic, strong) UIColor * _Nonnull primaryContrastColor;
/// Color of text that appears on the on danger color items like buttons.
@property (nonatomic, strong) UIColor * _Nonnull dangerContrastColor;
/// The UI parameters for the avatars shown in a Media Panel.
@property (nonatomic, strong) AIRAvatar * _Nonnull avatar;
/// The Icons used on the Media Panel
@property (nonatomic, strong) AIRIcons * _Nonnull icons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The shape of a border
SWIFT_CLASS_NAMED("BorderShape")
@interface AIRBorderShape : NSObject
@property (nonatomic) BOOL isCircle;
/// A rounded border with a radius.
+ (AIRBorderShape * _Nonnull)rounded:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT;
/// A circle border.
+ (AIRBorderShape * _Nonnull)circle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Avatar is used to represent the user avatar on the MediaPanel
SWIFT_CLASS_NAMED("Avatar")
@interface AIRAvatar : NSObject
/// Tint color of the shimmer effect shown while loading the avatar.
@property (nonatomic, strong) UIColor * _Nonnull background;
/// Defines if a border is a circle or a square with ways to customize the border radius.
@property (nonatomic, strong) AIRBorderShape * _Nonnull borderShape;
/// Spacing between avatars in the collapsed bar.
@property (nonatomic) CGFloat spacing;
/// Creates a new instance of <code>Avatar</code>. All the values are
/// optional and will fallback to the defaults if not specified.
- (nonnull instancetype)initWithBackground:(UIColor * _Nullable)background borderShape:(AIRBorderShape * _Nullable)borderShape spacing:(CGFloat)spacing OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;

/// The icons shown in a Media Panel
SWIFT_CLASS_NAMED("Icons")
@interface AIRIcons : NSObject
/// Icon shown to the left of the participant count.
@property (nonatomic, strong) UIImage * _Nullable participantsIcon;
/// Icon shown inside the “leave” button.
@property (nonatomic, strong) UIImage * _Nullable leaveCallIcon;
/// Icon shown in the microphone button when microphone is on.
@property (nonatomic, strong) UIImage * _Nullable micEnabledIcon;
/// Icon shown in the microphone button when microphone is off.
@property (nonatomic, strong) UIImage * _Nullable micDisabledIcon;
/// Icon shown at the top of the expanded panel as an indicator to collape it back.
@property (nonatomic, strong) UIImage * _Nullable collapseIcon;
/// Icon shown at the top of information modal
@property (nonatomic, strong) UIImage * _Nullable infoIcon;
/// Icon shown at the top of mic permissions icon
@property (nonatomic, strong) UIImage * _Nullable micPermissionsIcon;
/// Creates a new instance of <code>Icons</code>. All the values are
/// optional and will fallback to the defaults if not specified.
- (nonnull instancetype)initWithParticipantsIcon:(UIImage * _Nullable)participantsIcon leaveCallIcon:(UIImage * _Nullable)leaveCallIcon micEnabledIcon:(UIImage * _Nullable)micEnabledIcon micDisabledIcon:(UIImage * _Nullable)micDisabledIcon collapseIcon:(UIImage * _Nullable)collapseIcon infoIcon:(UIImage * _Nullable)infoIcon micPermissionsIcon:(UIImage * _Nullable)micPermissionsIcon OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface AIRTheme (SWIFT_EXTENSION(AircoreMediaPanel))
/// The default “light” theme for the Media Panel.
+ (AIRTheme * _Nonnull)light SWIFT_WARN_UNUSED_RESULT;
/// The default “dark” theme for the Media Panel.
+ (AIRTheme * _Nonnull)dark SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIColor (SWIFT_EXTENSION(AircoreMediaPanel))
/// Creates a color from an hex string (e.g.: “00ff00”), if not valid color hexString will return black color
+ (UIColor * _Nonnull)hexString:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
/// Creates a color from an hex (e.g.: 0x00ff00), if not valid color hex will return black color
+ (UIColor * _Nonnull)hex:(NSInteger)hex SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
