// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AircoreMediaPanel
import AVFoundation
import Combine
import Foundation
import Swift
import SwiftUI
import UIKit
import UIKit.UIView
import _Concurrency
@objcMembers @objc(AIRMediaPanelConfiguration) public class MediaPanelConfiguration : ObjectiveC.NSObject {
  @objcMembers @objc(AIRMediaPanelStrings) public class Strings : ObjectiveC.NSObject {
    @objc public var joinButton: Swift.String
    @objc public var joiningButton: Swift.String
    @objc public var joinButtonTooltip: Swift.String
    @objc public var leaveButton: Swift.String
    @objc public var retryButton: Swift.String
    @objc public var emptyCallTitle: Swift.String
    @objc public var emptyCallSubtitle: Swift.String
    @objc public var channelIsFullLabel: Swift.String
    @objc public var genericErrorLabel: Swift.String
    @objc public var speakerLimitModalTitle: Swift.String
    @objc public var speakerLimitModalSubtitle: Swift.String
    @objc public var speakerLimitModalDismissButton: Swift.String
    @objc public var noMicrophonePermissionsModalTitle: Swift.String
    @objc public var noMicrophonePermissionsModalSubtitle: Swift.String
    @objc public var noMicrophonePermissionsModalDismissButton: Swift.String
    @objc public var noMicrophonePermissionsModalGoToSettingsButton: Swift.String
    @objc public init(joinButton: Swift.String = "Join", joiningButton: Swift.String = "Joining...", joinButtonTooltip: Swift.String = "Tap Join to start the audio session", leaveButton: Swift.String = "Leave", retryButton: Swift.String = "Retry", emptyCallTitle: Swift.String = "No one is on the call yet", emptyCallSubtitle: Swift.String = "Tap Join below to be the first!", channelIsFullLabel: Swift.String = "The channel is full", genericErrorLabel: Swift.String = "Something went wrong...", speakerLimitModalTitle: Swift.String = "Speaker Limit Reached", speakerLimitModalSubtitle: Swift.String = "The number of speakers supported is currently at capacity. Try again when a speaker leaves", speakerLimitModalDismissButton: Swift.String = "OK", noMicrophonePermissionsModalTitle: Swift.String = "Enable Microphone", noMicrophonePermissionsModalSubtitle: Swift.String = "Allow access to your microphone in settings before you can use this feature.", noMicrophonePermissionsModalDismissButton: Swift.String = "OK", noMicrophonePermissionsModalGoToSettingsButton: Swift.String = "Go to Settings")
    @objc deinit
  }
  @objcMembers @objc(AIRMediaPanelCollapsedStateOptions) public class CollapsedStateOptions : ObjectiveC.NSObject {
    @objc public var maxAvatars: Swift.Int
    @objc public var panelTitle: Swift.String?
    @objc public var panelSubtitle: Swift.String?
    @objc public var joinButton: Swift.String?
    @objc public var joiningButton: Swift.String?
    @objc public var leaveButton: Swift.String?
    @objc public init(maxAvatars: Swift.Int = 5, panelTitle: Swift.String? = nil, panelSubtitle: Swift.String? = nil, joinButton: Swift.String? = nil, joiningButton: Swift.String? = nil, leaveButton: Swift.String? = nil)
    @objc deinit
  }
  @objcMembers @objc(AIRMediaPanelExpandedStateOptions) public class ExpandedStateOptions : ObjectiveC.NSObject {
    @objc public var panelTitle: Swift.String?
    @objc public var panelSubtitle: Swift.String?
    @objc public var joinButton: Swift.String?
    @objc public var joiningButton: Swift.String?
    @objc public var leaveButton: Swift.String?
    @objc public init(panelTitle: Swift.String? = nil, panelSubtitle: Swift.String? = nil, joinButton: Swift.String? = nil, joiningButton: Swift.String? = nil, leaveButton: Swift.String? = nil)
    @objc deinit
  }
  @objc public var panelTitle: Swift.String?
  @objc public var panelSubtitle: Swift.String?
  @objc public var showMicrophoneButton: Swift.Bool
  @objc public var autoPublishMicOnJoin: Swift.Bool
  @objc public var strings: AircoreMediaPanel.MediaPanelConfiguration.Strings
  @objc public var collapsedStateOptions: AircoreMediaPanel.MediaPanelConfiguration.CollapsedStateOptions
  @objc public var expandedStateOptions: AircoreMediaPanel.MediaPanelConfiguration.ExpandedStateOptions
  @objc public init(panelTitle: Swift.String? = nil, panelSubtitle: Swift.String? = nil, showMicrophoneButton: Swift.Bool = true, autoPublishMicOnJoin: Swift.Bool = false, strings: AircoreMediaPanel.MediaPanelConfiguration.Strings = Strings(), collapsedStateOptions: AircoreMediaPanel.MediaPanelConfiguration.CollapsedStateOptions = CollapsedStateOptions(), expandedStateOptions: AircoreMediaPanel.MediaPanelConfiguration.ExpandedStateOptions = ExpandedStateOptions())
  @objc public static func defaultConfiguration() -> AircoreMediaPanel.MediaPanelConfiguration
  @objc deinit
}
@objc(AIRTheme) @objcMembers public class Theme : ObjectiveC.NSObject {
  @_hasMissingDesignatedInitializers @objc(AIRBorderShape) @objcMembers public class BorderShape : ObjectiveC.NSObject {
    public var radius: CoreGraphics.CGFloat?
    @objc public var isCircle: Swift.Bool
    @objc public static func rounded(_ radius: CoreGraphics.CGFloat) -> AircoreMediaPanel.Theme.BorderShape
    @objc public static func circle() -> AircoreMediaPanel.Theme.BorderShape
    @objc deinit
  }
  @objc public init(backgroundColor: UIKit.UIColor? = nil, primaryColor: UIKit.UIColor? = nil, dangerColor: UIKit.UIColor? = nil, borderRadius: CoreGraphics.CGFloat = 18.0, borderWidth: CoreGraphics.CGFloat = 1.0, borderColor: UIKit.UIColor? = nil, fontFamily: UIKit.UIFont? = nil, textColor: UIKit.UIColor? = nil, subtextColor: UIKit.UIColor? = nil, primaryContrastColor: UIKit.UIColor? = nil, dangerContrastColor: UIKit.UIColor? = nil, avatar: AircoreMediaPanel.Theme.Avatar? = nil, icons: AircoreMediaPanel.Theme.Icons? = nil)
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var primaryColor: UIKit.UIColor
  @objc public var dangerColor: UIKit.UIColor
  @objc public var borderRadius: CoreGraphics.CGFloat
  @objc public var borderWidth: CoreGraphics.CGFloat
  @objc public var borderColor: UIKit.UIColor
  @objc public var fontFamily: UIKit.UIFont
  @objc public var textColor: UIKit.UIColor
  @objc public var subtextColor: UIKit.UIColor
  @objc public var primaryContrastColor: UIKit.UIColor
  @objc public var dangerContrastColor: UIKit.UIColor
  @objc(AIRAvatar) @objcMembers public class Avatar : ObjectiveC.NSObject {
    @objc public var background: UIKit.UIColor
    @objc public var borderShape: AircoreMediaPanel.Theme.BorderShape
    @objc public var spacing: CoreGraphics.CGFloat
    @objc public init(background: UIKit.UIColor? = nil, borderShape: AircoreMediaPanel.Theme.BorderShape? = nil, spacing: CoreGraphics.CGFloat = -4)
    @objc deinit
  }
  @objc public var avatar: AircoreMediaPanel.Theme.Avatar
  @objc(AIRIcons) @objcMembers public class Icons : ObjectiveC.NSObject {
    @objc public var participantsIcon: UIKit.UIImage?
    @objc public var leaveCallIcon: UIKit.UIImage?
    @objc public var micEnabledIcon: UIKit.UIImage?
    @objc public var micDisabledIcon: UIKit.UIImage?
    @objc public var collapseIcon: UIKit.UIImage?
    @objc public var infoIcon: UIKit.UIImage?
    @objc public var micPermissionsIcon: UIKit.UIImage?
    @objc public init(participantsIcon: UIKit.UIImage? = nil, leaveCallIcon: UIKit.UIImage? = nil, micEnabledIcon: UIKit.UIImage? = nil, micDisabledIcon: UIKit.UIImage? = nil, collapseIcon: UIKit.UIImage? = nil, infoIcon: UIKit.UIImage? = nil, micPermissionsIcon: UIKit.UIImage? = nil)
    @objc deinit
  }
  @objc public var icons: AircoreMediaPanel.Theme.Icons
  @objc deinit
}
extension AircoreMediaPanel.Theme {
  @objc public static func light() -> AircoreMediaPanel.Theme
  @objc public static func dark() -> AircoreMediaPanel.Theme
}
extension UIKit.UIColor {
  @objc(hexString:) public static func hex(_ hexString: Swift.String) -> UIKit.UIColor
  @objc public static func hex(_ hex: Swift.Int) -> UIKit.UIColor
}
public enum ClientError : Foundation.LocalizedError {
  case notConnected
  case clientAlreadyDestroyed
  case missingUserData
  case customError(message: Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol EventsLogger {
  func logEvent(_ event: Swift.String, subsystem: Swift.String)
}
@objc(AIRMediaPanelStyle) public enum MediaPanelStyle : Swift.Int {
  case widget
  case bottomBar
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(AIRMediaPanel) public class MediaPanel : ObjectiveC.NSObject {
  @objc public init(client: AircoreMediaPanel.Client, channelID: Swift.String, configuration: AircoreMediaPanel.MediaPanelConfiguration, theme: AircoreMediaPanel.Theme? = nil)
  @objc public func setTheme(_ theme: AircoreMediaPanel.Theme)
  @objc public func setConfiguration(_ configuration: AircoreMediaPanel.MediaPanelConfiguration)
  @objc public func present(in viewController: UIKit.UIViewController, style: AircoreMediaPanel.MediaPanelStyle)
  public func collapsedView() -> some SwiftUI.View
  
  @objc public func destroy()
  @objc deinit
}
@objc(AIRClientEvent) public enum ClientEvent : Swift.Int {
  case publishableAPIKeyInvalid
  case sessionAuthTokenInvalid
  case sessionAuthTokenMismatch
  case sessionAuthTokenNearingExpiry
  case localUserJoined
  case localUserLeft
  case localStreamStarted
  case localStreamStopped
  case localStreamMuted
  case localStreamUnmuted
  case remoteStreamAdded
  case remoteStreamRemoved
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(AIRClientLogLevel) public enum ClientLogLevel : Swift.Int {
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objcMembers @objc(AIRClient) public class Client : ObjectiveC.NSObject {
  public typealias EventHandler = (_ channelID: Swift.String, _ userID: Swift.String) -> Swift.Void
  public typealias ErrorHandler = (_ channelID: Swift.String?, _ error: Swift.Error) -> Swift.Void
  @objc public var authToken: Swift.String? {
    @objc get
  }
  @objc public var logLevel: AircoreMediaPanel.ClientLogLevel
  @objc final public let userID: Swift.String
  @objc public var userDisplayName: Swift.String?
  @objc public var userAvatarURL: Foundation.URL?
  @objc public static func create(publishableKey: Swift.String, userID: Swift.String) -> AircoreMediaPanel.Client
  @objc public static func create(authToken: Swift.String, userID: Swift.String) -> AircoreMediaPanel.Client
  @objc public func updateAuthToken(_ token: Swift.String, forChannelID channelID: Swift.String)
  @objc public func on(_ event: AircoreMediaPanel.ClientEvent, handler: @escaping AircoreMediaPanel.Client.EventHandler)
  @objc public func off(_ event: AircoreMediaPanel.ClientEvent)
  @objc public func onError(handler: @escaping AircoreMediaPanel.Client.ErrorHandler)
  @objc(connectToChannelID:) public func connect(channelID: Swift.String)
  @objc public func disconnect(fromChannelID channelID: Swift.String)
  @objc public func destroy()
  @objc public static var frameworkVersion: Swift.String {
    @objc get
  }
  @objc deinit
}
extension AircoreMediaPanel.MediaPanelStyle : Swift.Equatable {}
extension AircoreMediaPanel.MediaPanelStyle : Swift.Hashable {}
extension AircoreMediaPanel.MediaPanelStyle : Swift.RawRepresentable {}
extension AircoreMediaPanel.ClientEvent : Swift.Equatable {}
extension AircoreMediaPanel.ClientEvent : Swift.Hashable {}
extension AircoreMediaPanel.ClientEvent : Swift.RawRepresentable {}
extension AircoreMediaPanel.ClientLogLevel : Swift.Equatable {}
extension AircoreMediaPanel.ClientLogLevel : Swift.Hashable {}
extension AircoreMediaPanel.ClientLogLevel : Swift.RawRepresentable {}
